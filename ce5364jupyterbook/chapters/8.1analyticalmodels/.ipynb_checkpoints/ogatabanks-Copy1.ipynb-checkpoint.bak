{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ogata-Banks Solution\n",
    "\n",
    "The figure below depicts the physical system, and the analytical model system at three different times.\n",
    "\n",
    "![](1DADR.png)\n",
    "\n",
    "**Panel A** is a depiction of the physical system and the concentration profile along the x-axis at time less than zero. The concentration is zero everywhere.\n",
    "\n",
    "**Panel B** is a depection of the physical system and the concentration profile along the x-axis at time equal zero (like the Big Bang!). At x < 0, the concentration is suddenly raised to a value of $C_0$ everywhere to the left of the origin, x=0. This condition represents a step function input and is a suitable approximation of some upstream source zone that has a constant concentration. The concentration to the right of the origin (x > 0) is still zero.\n",
    "\n",
    "**Panel C** is a depiction of the physical system and the concentration profile aling the x-axis at some time greater than zero. The source mass has moved to the right of the origin a distance determined by the species velocity and dispersed along the translational front proportional to the dispersivity in the system. \n",
    "\n",
    "The analytical solution (Ogata and Banks, 1961) for this situation is: \n",
    "\n",
    "$$ C(x,t) = \\frac{C_0}{2}[erfc(\\frac{x-vt}{2\\sqrt{Dt}})+ exp(\\frac{xv}{D}) \\cdot erfc(\\frac{x+vt}{2\\sqrt{Dt}})]$$\n",
    "\n",
    "The solution is applicable for porous media flow, where the velocity (below) is the mean section velocity (seepage velocity divided by the porosity). The solution can also be used with streams and pipes (porosity = 1)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Building a Model\n",
    "\n",
    "This particular model is all over the internet as an on-line calculator,  but sometimes we have need to build our own version.  In Jupyter Notebooks running a python kernel we need to script the equation above and structure the equation into a useable function.\n",
    "\n",
    "### Forward Define the Functions\n",
    "This step is important, the functions must be defined before they are called -- in an interpreter, this is usually done at the top of the script.  Other scripting languages store the scripts at the end (JavaScript usually keeps scripts at end of the file -- it internally promotes then to the top before it runs its JIT bytecode compiler).\n",
    "\n",
    "In a compiled language, this step is not as necessary (predefinition is, location not so much). \n",
    "\n",
    "These prototype functions are usually written so that they are organic with respect to their variables, so there is no leakage -- in these two functions, the input list is just names, and the output is just a value that must be assigned in the calling script."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This is script is a test for SERVER-SIDE computation\n",
    "# Values to enter via a web interface and leave in a graphic\n",
    "# T Cleveland 2016-0216\n",
    "#\n",
    "# Import mathlibrary to get special functions\n",
    "#\n",
    "from math import sqrt,erf,erfc,exp  # get special math functions\n",
    "#\n",
    "# Import graphics routines for picture making\n",
    "#\n",
    "from matplotlib import pyplot as plt\n",
    "#\n",
    "# Import system calls to nicely exit the program -- may need to change for server-side processing\n",
    "#\n",
    "#import sys ## used in the html/cgi-bin, not needed here\n",
    "\n",
    "# contaminant function\n",
    "def conc1D(c_initial,c_source,space,time,t_pulse,dispersion,velocity,retardation,mu,lamda):\n",
    "# PARAMETERS (ARGUMENTS)\n",
    "# c_initial == concentration everywhere at time = 0, excpet at source\n",
    "# c_source == concentration at source (x=0), for any time\n",
    "# space == distance from source at x=0\n",
    "# time  == elapsed time from t=0\n",
    "# t_pulse == duration of finite source pulse\n",
    "# dispersion == dispersion (diffusion) coefficient (length^2/time)\n",
    "# velocity == species velocity (mean section velocity/porosity) (length/time)  Calculate before call function\n",
    "# retardation == retardation coefficient (adjusted time) Calculate before call function\n",
    "# mu == 1st order decay rate coefficient (time^-1)\n",
    "# lamda == 0th order rate constant (concentration/time)\n",
    "#################################################\n",
    "## COMPUTE A                                   ##\n",
    "#################################################\n",
    "    termA1 = (1.0-0.5*erfc(((retardation*space)-(velocity*time))/(2.0*sqrt(dispersion*retardation*time))))\n",
    "    termA2 = (-0.5*exp(velocity*space/dispersion)*erfc(((retardation*space)+(velocity*time))/(2.0*sqrt(dispersion*retardation*time))))\n",
    "    termA3 = (exp(-mu*time/retardation))\n",
    "    termA = termA1*(termA2+termA3)\n",
    "#################################################\n",
    "# error handler for negative (undefined) time ###\n",
    "#################################################\n",
    "    if(time < 0):\n",
    "        print(\"negative time -- no solution\")\n",
    "        concentration = (-999.9)\n",
    "        return (concentration)\n",
    "################################################\n",
    "# During the finite pulse                    ###\n",
    "################################################\n",
    "    if(time <= t_pulse):\n",
    "        concentration = (lamda/mu)+(c_initial - lamda/mu)*termA + (c_source - lamda/mu)*termB(space,time,velocity,dispersion,retardation,mu)\n",
    "        return(concentration)\n",
    "    else:\n",
    "        concentration = (lamda/mu)+(c_initial - lamda/mu)*termA + (c_source - lamda/mu)*termB(space,time,velocity,dispersion,retardation,mu) -c_source*termB(space,time-t_pulse,velocity,disersion,retardation,mu)\n",
    "        return(concentration)\n",
    "#################################################\n",
    "# error handler for impossible\n",
    "    print(\"no path to this message\")\n",
    "    concentration = -999.0\n",
    "    return(concentration)\n",
    "#################################################\n",
    "# term B function to handle time shift\n",
    "def termB(space,time,velocity,dispersion,retardation,mu):\n",
    "## COMPUTE B ##\n",
    "## Compute adjusted velocity\n",
    "    u = velocity* sqrt(1.0+(4.0*mu*dispersion)/(velocity**2)) # cm/day\n",
    "#\n",
    "    termB1 =(0.5)*exp(0.5*((velocity-u)*space)/(dispersion))\n",
    "    termB2 = erfc(((retardation*space)-(u*time))/(2.0*sqrt(dispersion*retardation*time)))\n",
    "    termB3 = termB1*termB2\n",
    "#\n",
    "    termB4 =(0.5)*exp(0.5*((velocity+u)*space)/(dispersion))\n",
    "    termB5 = erfc(((retardation*space)+(u*time))/(2.0*sqrt(dispersion*retardation*time)))\n",
    "    termB6 = termB4*termB5\n",
    "#\n",
    "    termB = termB3+termB6\n",
    "    return(termB)\n",
    "\n",
    "#################################################\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "end of script\n"
     ]
    }
   ],
   "source": [
    "# lets test interactive inputs\n",
    "#c_initial = float(input(\"Initial Concentration\"))\n",
    "#c_source = float(input(\"Source Concentration\"))\n",
    "#space = float(input(\"Plotting Length\"))\n",
    "#time  = float(input(\"Elapsed Time\"))\n",
    "#t_pulse = float(input(\"Pulse Duration 100\"))\n",
    "#t_pulse = time*10 # force constant reservoir condition\n",
    "#dispersion = float(input(\"Dispersion Coefficient\"))\n",
    "#velocity = float(input(\"Velocity\"))\n",
    "#retardation = float(input(\"Retardation Factor 1.0\"))\n",
    "#mu = 0.0000001\n",
    "#lamda = 0.0\n",
    "\n",
    "c_initial = 0.0\n",
    "c_source = 1000.0\n",
    "space = 100.\n",
    "time  = 10.\n",
    "t_pulse = 100.0*time #Force constant reservoir condition\n",
    "dispersion = 1.0\n",
    "velocity = 0.5\n",
    "retardation = 1.0\n",
    "mu = 1e-9\n",
    "lamda = 0.0\n",
    "\n",
    "#\n",
    "# forward define and initialize vectors for a profile plot\n",
    "#\n",
    "how_many_points = 50\n",
    "deltax = space/how_many_points\n",
    "x = [i*deltax for i in range(how_many_points)] # null list\n",
    "c = [0.0 for i in range(how_many_points)] # null list\n",
    "#\n",
    "# initialize the vectors so can use ordinary arithmetic\n",
    "#dist = [0.1,1.0,2.0,3.0,4.0,5.0]\n",
    "#dist = range(0,50,1)\n",
    "for i in range(0,how_many_points,1):\n",
    "    c[i] = conc1D(c_initial,c_source,x[i],time,t_pulse,dispersion,velocity,retardation,mu,lamda)\n",
    "#    print (x[i],c[i])  # cool, now can build plot\n",
    "#\n",
    "# Building the Plot\n",
    "#\n",
    "plt.plot(x,c, color='red', marker='o', linestyle = 'solid')  # make the plot object\n",
    "plt.title(\" Concentration Profile \\n Time:\" + repr(time) + \" time units \") # caption the plot object\n",
    "plt.xlabel(\" Distance from Source \") # label x-axis\n",
    "plt.ylabel(\" Concentration        \") # label y-axis\n",
    "plt.savefig(\"1D-ADR.png\")\n",
    "plt.show() # plot to stdio -- has to be last call as it kills prior objects\n",
    "plt.close('all') # needed when plt.show call not invoked\n",
    "print(\"end of script\")\n",
    "#sys.exit() # used to elegant exit for CGI-BIN use"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## References\n",
    "\n",
    "1. [Ogata, A. and Banks,R. B. (1961) A Solution of the Differential Equation of Longitudinal Dispersion in Porous Media. USGS Professional Paper 411-A.](https://pubs.usgs.gov/pp/0411a/report.pdf) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
