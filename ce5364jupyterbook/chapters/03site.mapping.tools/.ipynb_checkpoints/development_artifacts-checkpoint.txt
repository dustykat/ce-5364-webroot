# === Wireframe (gridded from scattered XYZ) ===
import numpy as np
import pandas
import matplotlib.pyplot as plt
from scipy.interpolate import griddata
from mpl_toolkits.mplot3d import Axes3D  # noqa: F401

# === Load Data ===
filename = 'ARS-W1-XYZ.txt'
my_xyz = pandas.read_csv(filename, sep='\t')
my_xyz = pandas.DataFrame(my_xyz)

# Reuse data already loaded as my_xyz
x = my_xyz['X-Easting'].to_numpy()
y = my_xyz['Y-Northing'].to_numpy()
z = my_xyz['Z-Elevation'].to_numpy()
xy = np.column_stack([x, y])

# Build a regular grid (adjust resolution if needed)
nx, ny = 120, 120
xi = np.linspace(x.min(), x.max(), nx)
yi = np.linspace(y.min(), y.max(), ny)
Xg, Yg = np.meshgrid(xi, yi)

# Interpolate. Use linear for stability near edges; then fill any NaNs with nearest.
Z_lin = griddata(xy, z, (Xg, Yg), method='linear')
if np.isnan(Z_lin).any():
    Z_nn = griddata(xy, z, (Xg, Yg), method='nearest')
    Z_lin[np.isnan(Z_lin)] = Z_nn[np.isnan(Z_lin)]

# Plot a true wireframe
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')
ax.plot_wireframe(Xg, Yg, Z_lin, rstride=3, cstride=3, linewidth=0.5, color='k')

ax.set_title('3D Wireframe (Interpolated Grid)')
ax.set_xlabel("X Coordinate (Easting, ft)")
ax.set_ylabel("Y Coordinate (Northing, ft)")
ax.set_zlabel("Elevation (ft)")

# Make axes aspect feel right (not perfect cube, but proportional)

vertical_exag = 20.0 # Exaggerate the vertical scale

ax.set_box_aspect((
    np.ptp(x),           # range of X
    np.ptp(y),           # range of Y
    (z.max() - z.min())*vertical_exag    # range of Z
))
plt.tight_layout()
plt.show()

# === Triangulated wireframe-like surface (no gridding) ===
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.tri as mtri
from mpl_toolkits.mplot3d import Axes3D  # noqa: F401

# === Load Data ===
filename = 'ARS-W1-XYZ.txt'
my_xyz = pandas.read_csv(filename, sep='\t')
my_xyz = pandas.DataFrame(my_xyz)

x = my_xyz['X-Easting'].to_numpy()
y = my_xyz['Y-Northing'].to_numpy()
z = my_xyz['Z-Elevation'].to_numpy()

tri = mtri.Triangulation(x, y)

fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')

# Draw a thin-edged surface; faces minimally shaded to keep a “wire” appearance
surf = ax.plot_trisurf(tri, z, linewidth=0.3, edgecolor='k', antialiased=True, shade=False, alpha=0.15)
# ^ Increase alpha if you want a bit more face fill; decrease toward 0.0 for more “wire-only” look.

ax.set_title('3D Triangulated Psuedo-Surface (Wireframe Style)')
ax.set_xlabel("X Coordinate (Easting, ft)")
ax.set_ylabel("Y Coordinate (Northing, ft)")
ax.set_zlabel("Elevation (ft)")
# Make axes aspect feel right (not perfect cube, but proportional)

vertical_exag = 20.0 # Exaggerate the vertical scale

ax.set_box_aspect((
    np.ptp(x),           # range of X
    np.ptp(y),           # range of Y
    (z.max() - z.min())*vertical_exag    # range of Z
))
plt.tight_layout()
plt.show()
