Traceback (most recent call last):
  File "/opt/jupyterhub/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/jupyterhub/lib/python3.8/site-packages/nbclient/client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/jupyterhub/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/jupyterhub/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/jupyterhub/lib/python3.8/site-packages/nbclient/client.py", line 540, in async_execute
    await self.async_execute_cell(
  File "/opt/jupyterhub/lib/python3.8/site-packages/nbclient/client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/jupyterhub/lib/python3.8/site-packages/nbclient/client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#
# example inputs
#
c_source = 1000.0 # source concentration
space = 100.      # how far in X-direction to extend the plot
time  = 50.       # time since release
dispersion = 1.0 # dispersion coefficient
velocity = 10.0    # pore velocity
retardation = 1.0
decay = 0.00001
#
# forward define and initialize vectors for a profile plot
#
how_many_points = 50   
deltax = space/how_many_points
x = [i*deltax for i in range(how_many_points)] # constructor notation
c = [0.0 for i in range(how_many_points)]      # constructor notation
#
# build the profile predictions
#
for i in range(0,how_many_points,1):
    c[i] = c1dadrd(c_source,x[i],time,dispersion,velocity,retardation,decay)
#
# Import graphics routines for picture making
#
from matplotlib import pyplot as plt
#
# Build and Render the Plot
#
plt.plot(x,c, color='red', linestyle = 'solid')  # make the plot object
plt.title(" Concentration Profile \n Time: " + repr(time) + " time units \n" + " Dispersion: " + repr(dispersion) + " length^2/time units \n" + " Velocity: " + repr(velocity) + " length/time units \n") # caption the plot object
plt.xlabel(" Distance from Source ") # label x-axis
plt.ylabel(" Concentration        ") # label y-axis
#plt.savefig("ogatabanksplot.png") # optional generates just a plot for embedding into a report
plt.show() # plot to stdio -- has to be last call as it kills prior objects
plt.close('all') # needed when plt.show call not invoked, optional here
#sys.exit() # used to elegant exit for CGI-BIN use
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mOverflowError[0m                             Traceback (most recent call last)
[0;32m<ipython-input-2-28288fbd7725>[0m in [0;36m<module>[0;34m[0m
[1;32m     20[0m [0;31m#[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     21[0m [0;32mfor[0m [0mi[0m [0;32min[0m [0mrange[0m[0;34m([0m[0;36m0[0m[0;34m,[0m[0mhow_many_points[0m[0;34m,[0m[0;36m1[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 22[0;31m     [0mc[0m[0;34m[[0m[0mi[0m[0;34m][0m [0;34m=[0m [0mc1dadrd[0m[0;34m([0m[0mc_source[0m[0;34m,[0m[0mx[0m[0;34m[[0m[0mi[0m[0;34m][0m[0;34m,[0m[0mtime[0m[0;34m,[0m[0mdispersion[0m[0;34m,[0m[0mvelocity[0m[0;34m,[0m[0mretardation[0m[0;34m,[0m[0mdecay[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     23[0m [0;31m#[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     24[0m [0;31m# Import graphics routines for picture making[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m<ipython-input-1-8768032615f6>[0m in [0;36mc1dadrd[0;34m(c_source, space, time, dispersion, velocity, retardation, decay)[0m
[1;32m     15[0m     [0mtemp2[0m [0;34m=[0m [0mexp[0m[0;34m([0m[0marg1[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     16[0m     [0mtemp3[0m [0;34m=[0m [0merfc[0m[0;34m([0m[0marg2[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 17[0;31m     [0mtemp4[0m [0;34m=[0m [0mexp[0m[0;34m([0m[0marg3[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     18[0m     [0mtemp5[0m [0;34m=[0m [0merfc[0m[0;34m([0m[0marg4[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     19[0m [0;34m[0m[0m

[0;31mOverflowError[0m: math range error
OverflowError: math range error

